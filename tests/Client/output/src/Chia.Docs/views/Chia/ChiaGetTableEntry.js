import { reactElement, reactApi, mkAttr } from "../../../../.fable/Feliz.1.17.0/Interop.fs.js";
import { singleton, empty, ofArray } from "../../../../.fable/fable-library.3.0.0-nagareyama-rc-007/List.js";
import { createObj } from "../../../../.fable/fable-library.3.0.0-nagareyama-rc-007/Util.js";
import { fixDocsView, code } from "../../Utils.js";

export const overview = (() => {
    let xs, xs_1, elms_2, xs_3, elms_3, xs_5, elms_4, xs_7;
    const children_5 = ofArray([(xs = ofArray([mkAttr("className", "title is-1"), mkAttr("children", reactApi.Children.toArray(["Chia.GetTableEntry"]))]), reactElement("h1", createObj(xs))), (xs_1 = ofArray([mkAttr("className", "subtitle is-2"), mkAttr("children", reactApi.Children.toArray(["Get table entities from a Azure tables by using Chia"]))]), reactElement("h2", createObj(xs_1))), reactElement("hr", createObj(empty())), (elms_2 = ofArray([reactElement("p", createObj(singleton(["children", ["First define your data type"]]))), code("\r\n                type TestData = {\r\n                  PartKey : string\r\n                  RowKey :  SortableRowKey\r\n                  Date : DateTimeOffset\r\n                  Value : float\r\n                  Text : string\r\n                }\r\n                 ")]), (xs_3 = ofArray([mkAttr("className", "content"), mkAttr("children", reactApi.Children.toArray(Array.from(elms_2)))]), reactElement("div", createObj(xs_3)))), reactElement("hr", createObj(empty())), (elms_3 = ofArray([reactElement("p", createObj(singleton(["children", ["Then you can get your values like this"]]))), code("\r\n                open Chia.GetTableEntry\r\n                open Microsoft.WindowsAzure.Storage.Table\r\n                let mapTestData entity : TestData =\r\n                    { Date = getDateTimeOffsetProperty \"Date\" entity\r\n                      PartKey = entity.PartitionKey\r\n                      RowKey = SortableRowKey entity.RowKey\r\n                      Text = getStringProperty \"Text\" entity\r\n                      Value = getDoubleProperty \"Value\" entity }\r\n                let! values = getValues mapTestData testTable\r\n                 ")]), (xs_5 = ofArray([mkAttr("className", "content"), mkAttr("children", reactApi.Children.toArray(Array.from(elms_3)))]), reactElement("div", createObj(xs_5)))), reactElement("hr", createObj(empty())), (elms_4 = ofArray([reactElement("p", createObj(singleton(["children", ["If you want to receive a single table record you can use following helper:"]]))), code("\r\n                open Chia.GetTableEntry\r\n                open Microsoft.WindowsAzure.Storage.Table\r\n                let mapTestData entity : TestData =\r\n                    { Date = getDateTimeOffsetProperty \"Date\" entity\r\n                      PartKey = entity.PartitionKey\r\n                      RowKey = SortableRowKey entity.RowKey\r\n                      Text = getStringProperty \"Text\" entity\r\n                      Value = getDoubleProperty \"Value\" entity }\r\n                let partKey, rowKey = \"AddYourPartKey\",\"AddYourRowKey\"\r\n                let! value = oneValue (partKey,rowKey) mapTestData testTable\r\n                ")]), (xs_7 = ofArray([mkAttr("className", "content"), mkAttr("children", reactApi.Children.toArray(Array.from(elms_4)))]), reactElement("div", createObj(xs_7)))), fixDocsView("ChiaGetTableEntry", false)]);
    return reactElement("div", createObj(singleton(["children", reactApi.Children.toArray(Array.from(children_5))])));
})();

